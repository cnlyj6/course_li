{"cells":[{"cell_type":"markdown","metadata":{"id":"QkELbiG6ogiG"},"source":["# Understanding LLM / Transformers (You cannot run the code without saving a copy)"]},{"cell_type":"markdown","metadata":{"id":"EvlATdaN45U8"},"source":["## Check the status of your GPU"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"To39dynktNC2","collapsed":true,"executionInfo":{"status":"ok","timestamp":1754465445772,"user_tz":-480,"elapsed":245,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}},"outputId":"d835b6b3-7619-44a2-bb02-3eddba754b9c","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["Wed Aug  6 07:30:45 2025       \n","+-----------------------------------------------------------------------------------------+\n","| NVIDIA-SMI 550.54.15              Driver Version: 550.54.15      CUDA Version: 12.4     |\n","|-----------------------------------------+------------------------+----------------------+\n","| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n","|                                         |                        |               MIG M. |\n","|=========================================+========================+======================|\n","|   0  Tesla T4                       Off |   00000000:00:04.0 Off |                    0 |\n","| N/A   71C    P0             32W /   70W |       0MiB /  15360MiB |      0%      Default |\n","|                                         |                        |                  N/A |\n","+-----------------------------------------+------------------------+----------------------+\n","                                                                                         \n","+-----------------------------------------------------------------------------------------+\n","| Processes:                                                                              |\n","|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\n","|        ID   ID                                                               Usage      |\n","|=========================================================================================|\n","|  No running processes found                                                             |\n","+-----------------------------------------------------------------------------------------+\n"]}],"source":["!nvidia-smi"]},{"cell_type":"markdown","metadata":{"id":"FISzjhfg4vo6"},"source":["## Installing **transformers** for further usage (please do not alter the version for stable usage of model)"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"e0ZtRUtLoWjq","collapsed":true,"executionInfo":{"status":"ok","timestamp":1754465472918,"user_tz":-480,"elapsed":27145,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}},"outputId":"a8f6443e-51c5-4157-fc35-ce5e1700d50c","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting transformers==4.47.0\n","  Using cached transformers-4.47.0-py3-none-any.whl.metadata (43 kB)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from transformers==4.47.0) (3.18.0)\n","Requirement already satisfied: huggingface-hub<1.0,>=0.24.0 in /usr/local/lib/python3.11/dist-packages (from transformers==4.47.0) (0.34.1)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from transformers==4.47.0) (1.26.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from transformers==4.47.0) (25.0)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.11/dist-packages (from transformers==4.47.0) (6.0.2)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.11/dist-packages (from transformers==4.47.0) (2024.11.6)\n","Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from transformers==4.47.0) (2.32.3)\n","Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers==4.47.0) (0.21.2)\n","Requirement already satisfied: safetensors>=0.4.1 in /usr/local/lib/python3.11/dist-packages (from transformers==4.47.0) (0.4.5)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.11/dist-packages (from transformers==4.47.0) (4.67.1)\n","Requirement already satisfied: fsspec>=2023.5.0 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.24.0->transformers==4.47.0) (2024.6.1)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.24.0->transformers==4.47.0) (4.14.1)\n","Requirement already satisfied: hf-xet<2.0.0,>=1.1.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub<1.0,>=0.24.0->transformers==4.47.0) (1.1.5)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->transformers==4.47.0) (3.4.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->transformers==4.47.0) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->transformers==4.47.0) (2.5.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->transformers==4.47.0) (2025.7.14)\n","Using cached transformers-4.47.0-py3-none-any.whl (10.1 MB)\n","Installing collected packages: transformers\n","  Attempting uninstall: transformers\n","    Found existing installation: transformers 4.55.0\n","    Uninstalling transformers-4.55.0:\n","      Successfully uninstalled transformers-4.55.0\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","transformer-lens 2.16.1 requires transformers>=4.51; python_version >= \"3.9\", but you have transformers 4.47.0 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed transformers-4.47.0\n"]}],"source":["!pip install transformers==4.47.0"]},{"cell_type":"markdown","metadata":{"id":"DLvm_l4g4O9U"},"source":["## Huggingface login\n","\n","### You need the huggingface token (hf_token) to login to huggingface and install the gemma model. Therefore make sure you create your huggingface token. (Described in the Google slides)"]},{"cell_type":"code","execution_count":3,"metadata":{"id":"9ewrDfyEr0KS","executionInfo":{"status":"ok","timestamp":1754465473497,"user_tz":-480,"elapsed":578,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}}},"outputs":[],"source":["######################## TODO (Pre-requisites) ########################\n","# replace `your_hf_token` with your huggingface token\n","\n","from huggingface_hub import login\n","login(\"\")\n","#######################################################################"]},{"cell_type":"markdown","source":["## Download the model"],"metadata":{"id":"HY1e8Urn-qy8"}},{"cell_type":"markdown","source":["### Gemma Model: https://huggingface.co/google/gemma-2-2b-it\n","### Please accept the lincense to download the gemma model (As described on Google Slides)\n"],"metadata":{"id":"N_nHl3zFCS5T"}},{"cell_type":"code","execution_count":4,"metadata":{"id":"WrrBTIl-ryeo","executionInfo":{"status":"ok","timestamp":1754465525667,"user_tz":-480,"elapsed":52168,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}},"outputId":"4a00442a-32f4-45de-8523-3bf218db3013","colab":{"base_uri":"https://localhost:8080/","height":176,"referenced_widgets":["9be077b1bed949eda281919cfe43cf38","86fb2eafe1744d07a97752061efbc6a8","7b7cebc5bf544e1095a90650f64b02ce","55360925831945af80d84fb2b4123b8a","095fb84dcd524c13aa2d8504e9646866","b62d87e4f1c14b169b55a941a52b4e23","7a676d6a9c674d7ba8c5f048c8df29c9","3f6a42d034ff45c1a081ec894d464261","88e6212b903347a0b07a94c933888c2f","680da7d238264edf891410c022134206","48dfe9f7d910489b8f956c98354fdabe"]}},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"9be077b1bed949eda281919cfe43cf38"}},"metadata":{}}],"source":["import torch\n","from transformers import AutoTokenizer, AutoModelForCausalLM\n","\n","model_id = \"google/gemma-2-2b-it\"\n","dtype = torch.float16\n","\n","# Load tokenizer and model\n","tokenizer = AutoTokenizer.from_pretrained(model_id)\n","model = AutoModelForCausalLM.from_pretrained(\n","    model_id,\n","    device_map=\"cuda\",\n","    torch_dtype=dtype,\n",")"]},{"cell_type":"markdown","source":["## Q1: Chat template Comparison"],"metadata":{"id":"P4cI-w4lEqvz"}},{"cell_type":"markdown","source":["### Evaluation Model: https://huggingface.co/cross-encoder/ms-marco-MiniLM-L-6-v2\n"],"metadata":{"id":"iBlbhVN4BHVG"}},{"cell_type":"code","source":["from transformers import AutoTokenizer, AutoModelForSequenceClassification\n","import torch\n","\n","SCORING_MODEL = AutoModelForSequenceClassification.from_pretrained('cross-encoder/ms-marco-MiniLM-L-6-v2')\n","SCORING_TOKENIZER = AutoTokenizer.from_pretrained('cross-encoder/ms-marco-MiniLM-L-6-v2')\n","\n","\n","def calculate_coherence(question, answer, scoring_model=SCORING_MODEL, tokenizer=SCORING_TOKENIZER):\n","  features = tokenizer([question], [answer], padding=True, truncation=True, return_tensors=\"pt\")\n","  scoring_model.eval()\n","  with torch.no_grad():\n","      scores = scoring_model(**features).logits.squeeze().item()\n","  return scores"],"metadata":{"id":"-iSpRNhLBcMz","executionInfo":{"status":"ok","timestamp":1754465526991,"user_tz":-480,"elapsed":1321,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9JFRJMWdMrHU"},"source":["### Observe whether the chat template affects the model's output results."]},{"cell_type":"code","execution_count":6,"metadata":{"id":"Bl-FK-lycGs5","executionInfo":{"status":"ok","timestamp":1754465527008,"user_tz":-480,"elapsed":2,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}}},"outputs":[],"source":["def generate_text_from_prompt(prompt, tokenizer, model):\n","  \"\"\"\n","  generate the output from the prompt.\n","  param:\n","    prompt (str): the prompt inputted to the model\n","    tokenizer   : the tokenizer that is used to encode / decode the input / output\n","    model       : the model that is used to generate the output\n","\n","  return:\n","    the response of the model\n","  \"\"\"\n","  print(\"========== Prompt inputted to the model ==========\\n\", prompt)\n","\n","  # Tokenize the prompt\n","  input_ids = tokenizer(prompt, return_tensors=\"pt\").input_ids.to(\"cuda\")\n","\n","  ######################## TODO (Q1.1 ~ 1.4) ########################\n","  ### You can refer to https://huggingface.co/google/gemma-2-2b-it for basic usage\n","  ### Make sure to use 'do_sample=False' to get a deterministic response\n","  ### Otherwise the coherence score may be different from the sample answer\n","\n","  # Generate response\n","  output_ids = model.generate(\n","        input_ids=input_ids,\n","        max_new_tokens=256,     # 可调\n","        do_sample=False,        # 关闭随机采样\n","        temperature=1.0,        # 不影响，因为 do_sample=False\n","        top_p=1.0,              # 不影响，因为 do_sample=False\n","        repetition_penalty=1.0  # 按需调整\n","    )\n","  ###################################################################\n","  if output_ids is not None and len(output_ids) > 0:\n","    return tokenizer.decode(output_ids[0], skip_special_tokens=True)\n","  else:\n","    return \"Empty Response\""]},{"cell_type":"code","execution_count":7,"metadata":{"id":"-_Gw3DqEbe6B","executionInfo":{"status":"ok","timestamp":1754465548424,"user_tz":-480,"elapsed":21414,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"3b5857e1-9914-4f57-8dd1-65f1e30aed18"},"outputs":[{"output_type":"stream","name":"stdout","text":["========== Prompt inputted to the model ==========\n"," <bos><start_of_turn>user\n","Please tell me about the key differences between supervised learning and unsupervised learning. Answer in 200 words.<end_of_turn>\n","<start_of_turn>model\n","\n"]},{"output_type":"stream","name":"stderr","text":["The 'batch_size' attribute of HybridCache is deprecated and will be removed in v4.49. Use the more precisely named 'self.max_batch_size' attribute instead.\n"]},{"output_type":"stream","name":"stdout","text":["========== Output ==========\n"," Supervised and unsupervised learning are two fundamental types of machine learning. \n","\n","**Supervised learning** involves training a model on labeled data, where each input has a corresponding output. The model learns to map inputs to outputs, making predictions on new, unseen data. Think of it like teaching a child with labeled examples: you show them pictures of cats and dogs, and they learn to distinguish between them. \n","\n","**Unsupervised learning**, on the other hand, uses unlabeled data. The model learns patterns and structures within the data without explicit guidance. It's like letting a child explore a room full of toys and discover patterns on their own. Examples include clustering similar items or finding hidden relationships in data.\n","\n","**Key differences:**\n","\n","* **Labeling:** Supervised uses labeled data, unsupervised doesn't.\n","* **Goal:** Supervised aims to predict outputs, unsupervised aims to discover patterns.\n","* **Applications:** Supervised: classification, regression, supervised tasks; Unsupervised: clustering, anomaly detection, dimensionality reduction. \n","\n","\n","Both types are powerful tools with their own strengths and weaknesses, and the choice depends on the specific problem and available data.\n","========== Coherence Score : 6.0734  ==========\n"]}],"source":["# With chat template\n","question = \"Please tell me about the key differences between supervised learning and unsupervised learning. Answer in 200 words.\"\n","chat = [\n","    {\"role\": \"user\", \"content\": question},\n","]\n","prompt_with_template = tokenizer.apply_chat_template(chat, tokenize=False, add_generation_prompt=True)\n","response_with_template = generate_text_from_prompt(prompt_with_template, tokenizer, model)\n","\n","# extract the real output from the model\n","response_with_template = response_with_template.split('model\\n')[-1].strip('\\n').strip()\n","\n","print(\"========== Output ==========\\n\", response_with_template)\n","score = calculate_coherence(question, response_with_template)\n","print(f\"========== Coherence Score : {score:.4f}  ==========\")"]},{"cell_type":"code","execution_count":8,"metadata":{"id":"6aaeWDSCbigu","executionInfo":{"status":"ok","timestamp":1754465559382,"user_tz":-480,"elapsed":10957,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"5d91b431-10a3-4b98-8824-7248f622ab4c"},"outputs":[{"output_type":"stream","name":"stdout","text":["========== Prompt inputted to the model ==========\n"," Please tell me about the key differences between supervised learning and unsupervised learning. Answer in 200 words.\n","========== Output ==========\n"," **Supervised Learning:**\n","\n","* **Labeled data:** Uses data with known outputs (labels) to train models.\n","* **Goal:** Predict the output for new, unseen data.\n","* **Examples:** Image classification, spam detection, predicting house prices.\n","\n","**Unsupervised Learning:**\n","\n","* **Unlabeled data:** Uses data without known outputs to discover patterns.\n","* **Goal:** Explore data, identify clusters, or reduce dimensionality.\n","* **Examples:** Customer segmentation, anomaly detection, dimensionality reduction.\n","\n","\n","In essence, supervised learning learns from labeled examples to make predictions, while unsupervised learning explores unlabeled data to uncover hidden structures and relationships.\n","========== Coherence Score : 4.2210  ==========\n"]}],"source":["# Without chat template (directly using plain text)\n","response_without_template = generate_text_from_prompt(question, tokenizer, model)\n","\n","# extract the real output from the model\n","response_without_template = response_without_template.split(question.split(' ')[-1])[-1].strip('\\n').strip()\n","print(\"========== Output ==========\\n\", response_without_template)\n","score = calculate_coherence(question, response_without_template)\n","print(f\"========== Coherence Score : {score:.4f}  ==========\")"]},{"cell_type":"markdown","metadata":{"id":"9YT8amEJSP-E"},"source":["## Q2: Multi-turn conversations"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"hAkqoPxsSrbz","colab":{"base_uri":"https://localhost:8080/"},"outputId":"17ea0f0c-f27a-4f90-d24b-8d0c4e295e6c","executionInfo":{"status":"ok","timestamp":1754465565155,"user_tz":-480,"elapsed":5772,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Chatbot: Hello! How can I assist you today? (Type 'exit' to quit)\n","You: exit\n","Chatbot: Goodbye!\n"]}],"source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","chat_history = []\n","round = 0\n","print(\"Chatbot: Hello! How can I assist you today? (Type 'exit' to quit)\")\n","\n","while True:\n","    user_input = input(\"You: \")\n","    if user_input.lower() == \"exit\":\n","        print(\"Chatbot: Goodbye!\")\n","        break\n","\n","    round += 1\n","    chat_history.append({\"role\": \"user\", \"content\": user_input})\n","    chat_template_format_prompt = tokenizer.apply_chat_template(chat_history, tokenize=False, add_generation_prompt=True)\n","    ######################## (Q2.1 ~ 2.3) ########################\n","    # Observe the prompt with chat template format that was inputted to the model in the current round to answer Q2.1 ~ Q2.3.\n","    print(f\"=== Prompt with chat template format inputted to the model on round {round} ===\\n{chat_template_format_prompt}\")\n","    print(f\"===============================================\")\n","    ###################################################################\n","\n","    inputs = tokenizer(chat_template_format_prompt, return_tensors=\"pt\").to(\"cuda\")\n","    # Get logits instead of directly generating\n","    with torch.no_grad():\n","        outputs_p = model(**inputs)\n","\n","    logits = outputs_p.logits  # Logits of the model (raw scores before softmax)\n","    last_token_logits = logits[:, -1, :]  # Take the logits of the last generated token\n","\n","    # Apply softmax to get probabilities\n","    probs = torch.nn.functional.softmax(last_token_logits, dim=-1)\n","\n","    # Get top-k tokens (e.g., 10)\n","    top_k = 10\n","    top_probs, top_indices = torch.topk(probs, top_k)\n","\n","    # Convert to numpy for plotting\n","    top_probs = top_probs.cpu().squeeze().numpy()\n","    top_indices = top_indices.cpu().squeeze().numpy()\n","    top_tokens = [tokenizer.decode([idx]) for idx in top_indices]\n","\n","    # Plot probability distribution\n","    plt.figure(figsize=(10, 5))\n","    sns.barplot(x=top_probs, y=top_tokens, palette=\"coolwarm\")\n","    plt.xlabel(\"Probability\")\n","    plt.ylabel(\"Token\")\n","    plt.title(\"Top Token Probabilities for Next Word\")\n","    plt.show()\n","\n","    # Generate response\n","    outputs = model.generate(**inputs, max_new_tokens=200, pad_token_id=tokenizer.eos_token_id, do_sample=False)\n","    response = tokenizer.decode(outputs[0][inputs.input_ids.shape[1]:], skip_special_tokens=True)\n","\n","    print(f\"Chatbot: {response}\")\n","    chat_history.append({\"role\": \"assistant\", \"content\": response})"]},{"cell_type":"markdown","metadata":{"id":"Oo7JKIgp0Txd"},"source":["## Q3: Tokenization of Sentence"]},{"cell_type":"code","execution_count":10,"metadata":{"id":"qHrVdb_20Txd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1754465565155,"user_tz":-480,"elapsed":8,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}},"outputId":"f49c22bc-f73c-4e8f-ab6c-b27cae2f2a9f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Token IDs: [235285, 2182, 4998, 476, 13403, 14715, 3205, 731, 11325, 18809, 235290, 12636, 9201, 235269, 2439, 1105, 692, 235336]\n","Tokens: ['I', '▁love', '▁taking', '▁a', '▁Machine', '▁Learning', '▁course', '▁by', '▁Professor', '▁Hung', '-', 'yi', '▁Lee', ',', '▁What', '▁about', '▁you', '?']\n","Token: I, token index: 235285\n","Token: ▁love, token index: 2182\n","Token: ▁taking, token index: 4998\n","Token: ▁a, token index: 476\n","Token: ▁Machine, token index: 13403\n","Token: ▁Learning, token index: 14715\n","Token: ▁course, token index: 3205\n","Token: ▁by, token index: 731\n","Token: ▁Professor, token index: 11325\n","Token: ▁Hung, token index: 18809\n","Token: -, token index: 235290\n","Token: yi, token index: 12636\n","Token: ▁Lee, token index: 9201\n","Token: ,, token index: 235269\n","Token: ▁What, token index: 2439\n","Token: ▁about, token index: 1105\n","Token: ▁you, token index: 692\n","Token: ?, token index: 235336\n"]}],"source":["sentence = \"I love taking a Machine Learning course by Professor Hung-yi Lee, What about you?\" #@param {type:\"string\"}\n","\n","######################## TODO (Q3.1 ~ 3.4) ########################\n","### You can refer to https://huggingface.co/learn/nlp-course/en/chapter2/4?fw=pt for basic tokenizer usage\n","### and https://huggingface.co/docs/transformers/en/main_classes/tokenizer for full tokenizer usage\n","\n","# Encode the sentence into token IDs without adding special tokens\n","token_ids = tokenizer.encode(sentence, add_special_tokens=False)\n","\n","# Convert the token IDs back to their corresponding tokens (words or subwords)\n","tokens = tokenizer.convert_ids_to_tokens(token_ids)\n","###################################################################\n","print(\"Token IDs:\", token_ids)\n","print(\"Tokens:\", tokens)\n","# Iterate through the tokens and their corresponding token IDs\n","for t, t_id in zip(tokens, token_ids):\n","    # Print the token and its index (ID)\n","    print(f\"Token: {t}, token index: {t_id}\")"]},{"cell_type":"markdown","metadata":{"id":"O1ocRPtU0Txe"},"source":["## Q4: Auto-regressive generation"]},{"cell_type":"code","source":["from tqdm import trange\n","from transformers import HybridCache\n","\n","max_generation_tokens = 30\n","\n","######################## TODO (Q4.3 ~ 4.6) ########################\n","# Modify the value of k and p accordingly\n","\n","top_k = 200  # Set K for top-k sampling\n","top_p = 0.999  # Set P for nucleus sampling\n","###################################################################\n","\n","# Input prompt\n","prompt = f\"Generate a paraphrase of the sentence 'Professor Hung-yi Lee is one of the best teachers in the domain of machine learning'. Just response with one sentence.\"\n","input_ids = tokenizer(prompt, return_tensors=\"pt\")\n","\n","# Initialize KV Cache\n","kv_cache = HybridCache(config=model.config, max_batch_size=1, max_cache_len=max_generation_tokens, device=\"cuda\", dtype=torch.float16)\n","\n","next_token_id = input_ids.input_ids.to(\"cuda\")\n","attention_mask = input_ids.attention_mask.to(\"cuda\")\n","cache_position = torch.arange(attention_mask.shape[1], device=\"cuda\")\n","\n","generated_sentences_top_k = []\n","generated_sentences_top_p = []\n","\n","\n","\n","# Define the generation parameters\n","generation_params = {\n","    \"do_sample\": True,  # Enable sampling\n","    \"max_length\": max_generation_tokens + len(input_ids.input_ids[0]),  # Total length including prompt\n","    \"pad_token_id\": tokenizer.pad_token_id,  # Ensure padding token is set\n","    \"eos_token_id\": tokenizer.eos_token_id,  # Ensure EOS token is set\n","    \"bos_token_id\": tokenizer.bos_token_id,  # Ensure BOS token is set\n","    \"attention_mask\": input_ids.attention_mask.to(\"cuda\"),  # Move attention mask to GPU\n","    \"use_cache\": True,  # Enable caching\n","    \"return_dict_in_generate\": True,  # Return generation outputs\n","    \"output_scores\": False,  # Disable outputting scores\n","}\n","\n","\n","for method in [\"top-k\", \"top-p\"]:\n","    for _ in trange(20):\n","      if method == \"top-k\":\n","        # Generate text using the model with top_k\n","        generated_output = model.generate(\n","            input_ids=input_ids.input_ids.to(\"cuda\"),\n","            top_k=top_k,\n","            **generation_params\n","        )\n","      elif method == \"top-p\":\n","        # Generate text using the model with top_p\n","        ######################## TODO (Q4.3 ~ 4.6) ########################\n","        # Generate output from the model based on the input_ids and specified generation parameters\n","        # You can refer to this documentation: https://huggingface.co/docs/transformers/en/main_classes/text_generation\n","        # Hint: You can check how we generate the text with top_k\n","\n","        generated_output = model.generate(\n","            input_ids=input_ids.input_ids.to(\"cuda\"),\n","            top_p=top_p,\n","            **generation_params\n","        )\n","        ###################################################################\n","      else:\n","        raise NotImplementedError()\n","      # Decode the generated tokens\n","      generated_tokens = generated_output.sequences[0, len(input_ids.input_ids[0]):]\n","      decoded_text = tokenizer.decode(generated_tokens, skip_special_tokens=True)\n","\n","      # Combine the prompt with the generated text\n","      sentence = decoded_text.replace(\" ,\", \",\").replace(\" 's\", \"'s\").replace(\" .\", \".\").strip()\n","\n","      # Append the generated sentence to the appropriate list\n","      if method == \"top-k\":\n","          generated_sentences_top_k.append(sentence)\n","      else:\n","          generated_sentences_top_p.append(sentence)\n","\n","# Print results\n","print(\"===== Top-K Sampling Output =====\")\n","print()\n","for idx,sentence in enumerate(generated_sentences_top_k):\n","    print(f\"{idx}. {sentence}\")\n","print()\n","print(\"===== Top-P Sampling Output =====\")\n","print()\n","for idx,sentence in enumerate(generated_sentences_top_p):\n","    print(f\"{idx}. {sentence}\")\n","print()"],"metadata":{"id":"F3F8yl41t2he","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1754465641794,"user_tz":-480,"elapsed":76642,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}},"outputId":"a1e602cd-81ae-4c44-a74b-4d38446cf0d0"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 20/20 [00:43<00:00,  2.18s/it]\n","100%|██████████| 20/20 [00:32<00:00,  1.64s/it]"]},{"output_type":"stream","name":"stdout","text":["===== Top-K Sampling Output =====\n","\n","0. Lee is highly regarded, particularly in the field of machine learning.\n","1. Professor Lee's expertise in machine learning is highly regarded, positioning him amongst the top educators in the field.\n","2. Professor Lee is highly regarded for his expertise in machine learning education and instruction.\n","3. **Here's what the sentence means:**\n","\n","The sentence praises Professor Hung-yi Lee's skills as a machine learning teacher.\n","4. Professor Lee is highly regarded within the field of machine learning for his exceptional teaching abilities.\n","5. Professor Lee's expertise in machine learning is widely recognized, earning him a reputation as one of the leading educators in the field.\n","6. Professor Lee is a highly-regarded expert in machine learning education.\n","7. Professor Lee is highly regarded as a leading expert in machine learning education.\n","8. Professor Lee is highly renowned for his expertise in machine learning education and among the top educators delivering impactful learning experiences.\n","9. Professor Lee is widely recognized for his expertise in machine learning and is highly regarded as a top educator.\n","10. Professor Lee is highly regarded for his expertise in machine learning, making him known as one of the leading teachers in the field.\n","11. His exceptional teaching ability in the field of machine learning has earned him recognition as a top-notch instructor.\n","12. This is a common knowledge statement and can be paraphrased in a number of ways. \n"," \n"," Here is one possibility:  Professor Lee is\n","13. Lee, a renowned professor in machine learning, is highly regarded for his outstanding teaching abilities.\n","\n","\n","\n","Please let me know if you need further assistance\n","14. Professor Lee is highly regarded as one of the leading researchers and educators in machine learning.\n","15. Professor Lee is highly respected for his expertise in machine learning.\n","16. Lee, a distinguished professor, has earned recognition as a top innovator and teacher in the field of machine learning.\n","17. He is highly regarded as a leading expert in the field of machine learning, highly skilled in teaching and inspiring students to achieve greater levels of understanding\n","18. Professor Lee is highly regarded as a renowned expert particularly in the field of machine learning, his teaching skills are exceptional.\n","19. Professor Lee is highly regarded as a leading expert in machine learning instruction.\n","\n","===== Top-P Sampling Output =====\n","\n","0. He is highly regarded as a leading expert in machine learning education.\n","1. Professor Lee's expertise in machine learning earns him a reputation as a top teacher.\n","2. Professor Lee is highly regarded in the field of machine learning and considered to be one of the top-performing teachers.\n","3. Professor Lee is an exceptional educator recognized for his mastery in machine learning.\n","4. Professor Lee's highly regarded expertise and contributions within machine learning make him a leading educator in the field.\n","5. He is widely recognized as a top-tier educator in the field of machine learning, possessing a wealth of knowledge and pedagogical expertise.\n","6. Professor Lee is highly regarded as a leading expert in machine learning education.\n","7. Professor Lee is highly regarded for his expertise and contributions to machine learning education.\n","8. Professor Lee is highly regarded for his expertise in machine learning and his ability to guide his students towards excellence.\n","9. He is highly regarded for his contributions to the field of machine learning, making him a standout professor deserving of praise and recognition.\n","10. Machine Learning expert, Professor Hung-yi Lee, is highly regarded among his peers as one of the leading figures in the field.\n","11. He is widely recognized as a top-tier educator within the field of machine learning.\n","12. Professor Lee is highly regarded as a leading expert in machine learning education.\n","13. Professor Lee is highly respected within the field of machine learning for his exceptional teaching abilities.\n","14. Professor Lee is highly respected and renowned in the field of machine learning, making him one of the top teachers in the field.\n","15. Dr. Hung-yi Lee is widely regarded as a highly accomplished educator in the field of machine learning.\n","16. Many consider him one of the top researchers in the field, and his teaching style is widely regarded as exceptional. \n"," \n","\n","Professor Hung\n","17. He is highly regarded as a leader in the field of machine learning and is known for his exceptional teaching abilities.\n","18. Professor Hung-yi Lee is highly regarded as an insightful and accomplished teacher in the field of machine learning.\n","19. Professor Lee is renowned for his exceptional teaching abilities in the field of machine learning.\n","\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["from nltk.translate.bleu_score import sentence_bleu\n","\n","def compute_self_bleu(generated_sentences):\n","    total_bleu_score = 0\n","    num_sentences = len(generated_sentences)\n","\n","    for i, hypothesis in enumerate(generated_sentences):\n","        references = [generated_sentences[j] for j in range(num_sentences) if j != i]\n","        bleu_scores = [sentence_bleu([ref.split()], hypothesis.split()) for ref in references]\n","        total_bleu_score += sum(bleu_scores) / len(bleu_scores)\n","\n","    return total_bleu_score / num_sentences\n","\n","# Calculate BLEU score\n","bleu_score = compute_self_bleu(generated_sentences_top_k)\n","print(f\"self-BLEU Score for top_k (k={top_k}): {bleu_score:.4f}\")\n","\n","# Calculate BLEU score\n","bleu_score = compute_self_bleu(generated_sentences_top_p)\n","print(f\"self-BLEU Score for top_p (p={top_p}): {bleu_score:.4f}\")\n"],"metadata":{"id":"oMkYXsyLqR5I","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1754465642103,"user_tz":-480,"elapsed":308,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}},"outputId":"58b3c5e1-2719-43ac-ac67-014a5909dbd6"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["self-BLEU Score for top_k (k=200): 0.0969\n","self-BLEU Score for top_p (p=0.999): 0.1005\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/nltk/translate/bleu_score.py:577: UserWarning: \n","The hypothesis contains 0 counts of 4-gram overlaps.\n","Therefore the BLEU score evaluates to 0, independently of\n","how many N-gram overlaps of lower order it contains.\n","Consider using lower n-gram order or use SmoothingFunction()\n","  warnings.warn(_msg)\n","/usr/local/lib/python3.11/dist-packages/nltk/translate/bleu_score.py:577: UserWarning: \n","The hypothesis contains 0 counts of 2-gram overlaps.\n","Therefore the BLEU score evaluates to 0, independently of\n","how many N-gram overlaps of lower order it contains.\n","Consider using lower n-gram order or use SmoothingFunction()\n","  warnings.warn(_msg)\n","/usr/local/lib/python3.11/dist-packages/nltk/translate/bleu_score.py:577: UserWarning: \n","The hypothesis contains 0 counts of 3-gram overlaps.\n","Therefore the BLEU score evaluates to 0, independently of\n","how many N-gram overlaps of lower order it contains.\n","Consider using lower n-gram order or use SmoothingFunction()\n","  warnings.warn(_msg)\n"]}]},{"cell_type":"markdown","metadata":{"id":"RvI2LvarYe-M"},"source":["## Q5: t-SNE"]},{"cell_type":"code","source":["from transformers import AutoModelForCausalLM, AutoTokenizer\n","import torch\n","from sklearn.manifold import TSNE\n","import matplotlib.pyplot as plt\n","\n","device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","model.to(device)\n","\n","######################## (Q5.2 ~ 5.3) ########################\n","# Sentences with different meanings of words\n","sentences = [\n","    \"I ate a fresh apple.\",  # Apple (fruit)\n","    \"Apple released the new iPhone.\",  # Apple (company)\n","    \"I peeled an orange and ate it.\",  # Orange (fruit)\n","    \"The Orange network has great coverage.\",  # Orange (telecom)\n","    \"Microsoft announced a new update.\",  # Microsoft (company)\n","    \"Banana is my favorite fruit.\",  # Banana (fruit)\n","]\n","\n","# Tokenize and move to device\n","inputs = tokenizer(sentences, return_tensors=\"pt\", padding=True, truncation=True)\n","inputs = inputs.to(device)\n","\n","# Get hidden states\n","with torch.no_grad():\n","    outputs = model(**inputs, output_hidden_states=True)\n","\n","hidden_states = outputs.hidden_states[-1]  # Extract last layer embeddings\n","\n","# Compute sentence-level embeddings (mean pooling)\n","sentence_embeddings = hidden_states.mean(dim=1).cpu().numpy()\n","\n","# Words to visualize\n","word_labels = [\n","    \"Apple (fruit)\", \"Apple (company)\",\n","    \"Orange (fruit)\", \"Orange (telecom)\",\n","    \"Microsoft (company)\", \"Banana (fruit)\"\n","]\n","\n","# Reduce to 2D using t-SNE\n","tsne = TSNE(n_components=2, perplexity=2, random_state=42)\n","embeddings_2d = tsne.fit_transform(sentence_embeddings)\n","\n","# Plot the embeddings\n","plt.figure(figsize=(8, 6))\n","colors = [\"red\", \"blue\", \"orange\", \"purple\", \"green\", \"brown\"]\n","for i, label in enumerate(word_labels):\n","    plt.scatter(embeddings_2d[i, 0], embeddings_2d[i, 1], color=colors[i], s=100)\n","    plt.text(embeddings_2d[i, 0] + 0.1, embeddings_2d[i, 1] + 0.1, label, fontsize=12, color=colors[i])\n","\n","plt.xlabel(\"t-SNE Dim 1\")\n","plt.ylabel(\"t-SNE Dim 2\")\n","plt.title(\"t-SNE Visualization of Word Embeddings\")\n","plt.show()\n","##################################################"],"metadata":{"id":"AH4t64HSv6r9","colab":{"base_uri":"https://localhost:8080/","height":620},"executionInfo":{"status":"ok","timestamp":1754465642891,"user_tz":-480,"elapsed":782,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}},"outputId":"c806c6f9-92fa-47e0-ca03-46be6ba148db"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stderr","text":["Asking to truncate to max_length but no maximum length is provided and the model has no predefined maximum length. Default to no truncation.\n","The 'batch_size' argument of HybridCache is deprecated and will be removed in v4.49. Use the more precisely named 'max_batch_size' argument instead.\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"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S5cuVdeuXVWyZEnt3r1bn3zyiZo3b67NmzfL19dXTZs21YABAzR69Gi98sor9paHzC0QmSUmJqp58+bauXOn+vXrp8jISE2fPl29evVSXFycnn76aYf6U6dO1alTp/T444/LZrNp+PDhuvfeexUdHX3J344fOXJEjRo10tmzZzVgwACFhIToyy+/VPv27fX999/rnnvuUdOmTfX111/roYceyrabVGYNGjRQoUKFtHjxYj3yyCOSrOSlcOHCqlu3rm655RYtWbJEnTp1sm+TLiQ68+bN05133qly5cppyJAhSkxM1JgxY9S4cWOtWbPG6SW3c+fOqlChgt59910ZYyRZifrbb7+tu+66S3fddZfWrFmjVq1aZdkKmZ2c/luIjY3V3Xffra5du6pz58765JNP1LVrV02ZMkUDBw7UE088oQceeEAjRozQfffdp3379snf39/hmF26dFHZsmU1bNgwLV++XKNHj1ZsbKy++uore5133nlHr7/+urp06aJHHnlEx44d05gxY9S0aVOtXbvW3vo1YcIEPf7442rUqJEGDhyo6OhotW/fXkWKFFGpUqXsx0tMTNTtt9+uvXv3asCAASpevLi+/vpr/fnnnzm+Rzl57mbNmqX7779fNWrU0LBhwxQbG6s+ffqoRIkSDseaO3euunXrpttvv13vv/++JGnLli1asmSJ0/MOANkyAPLUiBEjjCQTExOTo/pnz541lSpVMpJMmTJlTK9evcyECRPMkSNHnOoOHjzYSDLHjh0zCxcuNJLMhx9+aN9epkwZ07ZtW4d9JGX7+eabby4ZW2pqqilWrJhp2LChQ/mnn35qJJk5c+bYyyZOnOhw3TNmzDCSzKpVq7I9/l9//WUkmb/++suhPCYmxkgyEydOdLhPF/vmm2+MJLNo0aJs4zDGmGbNmplmzZplG8d3331nJJk333zzkudbtmyZkWS++uore9n06dOzvIaszjty5EgjyUyePNlelpycbBo2bGj8/PxMQkKCw/WHhISYkydP2uv+9NNPRpL55Zdfsr0WY4wZOHCgkWT+/vtve9mpU6dMZGSkKVu2rElLS7OXSzJ9+/a95PEy1K1b10RFRdm/P/7446ZFixbGGGNeeOEFU7duXfu2++67z/j6+pqUlBRjjDG1a9c2YWFh5sSJE/Y6//77r3FzczM9evSwl2U84926dXM499GjR42np6dp27atSU9Pt5e/8sorRpLp2bPnZePP6b+FZs2aGUlm6tSp9rKtW7caScbNzc0sX77cXj5nzhynZzXjGtq3b+9w/qeeespIMv/++68xxpjdu3cbd3d388477zjU27BhgylUqJC9PDk52YSFhZnatWubc+fO2euNHz/eSMryGfvuu+/sZWfOnDHly5d3ek579uxpypQpY/+em+euRo0apmTJkubUqVP2sgULFtj/O5bh6aefNgEBASY1NdUAwJWiSxiQz3x8fLRixQp7V7JJkyapT58+KlasmPr3759lVw5Jatq0qVq0aKHhw4crMTHxkufo0KGD5s6d6/Rp0aLFJfdzd3dX165dtWzZMoeuUFOnTlV4eLhuv/32bPfN+M3wr7/+qpSUlEueJycyt+Rk/Ja8QYMGkqQ1a9Zc8XE3b96shx9+WB06dNBrr72W5flSUlJ04sQJlS9fXkFBQVd8vt9++00RERHq1q2bvczDw0MDBgzQ6dOntXDhQof6999/v4KDg+3fb731VklWV6zLnadevXoO3bH8/Pz02GOPaffu3dq8efMVxd+kSRPt2rVLhw8flmS1ojRq1EiS1aVx7dq19tnrlixZovr166tQoUI6dOiQ1q1bp169eqlIkSL249WsWVN33HGHfvvtN6dzXTxr17x585ScnKz+/fs7tKYNHDgwV9eQ038Lfn5+6tq1q/17pUqVFBQUpCpVqqh+/fr28oy/Z/Uz6du3r8P3/v37S5L9en/88Uelp6erS5cuOn78uP0TERGhChUq6K+//pJkda08evSonnjiCYdWoF69eikwMNDhHL/99puKFSum++67z17m6+urxx57LMf36HLP3cGDB7Vhwwb16NFDfn5+9nrNmjVTjRo1HI4VFBSkM2fOaO7cuTk+PwBcjIQFuE5Onjypw4cP2z/x8fH2bYGBgRo+fLh2796t3bt3a8KECapUqZI+/vhjvfXWW9kec8iQITp8+LA+/fTTS567ZMmSatmypdMnPDz8snFnDKqfOnWqJKt//N9//62uXbtecpB9s2bN1KlTJw0dOlRFixZVhw4dNHHixGwTsMs5efKknn76aYWHh8vHx0ehoaGKjIyUJId7mRsJCQm69957VaJECX311VcOL8KJiYl64403VKpUKXl5ealo0aIKDQ1VXFzcFZ9vz549qlChgtzcHP/Tm9GFbM+ePQ7lpUuXdvie8RIZGxt72fNUqlTJqTy78+RU5nEscXFx2rRpk33sVaNGjZSamqqVK1cqJiZGhw4dstfPOF92MR0/flxnzpxxKM/42Wa+JkmqUKGCQ3loaKjDy/Xl5PTfQsmSJZ26GQYGBjp0v8ook7L+mVwca1RUlNzc3OzJ/44dO2SMUYUKFRQaGurw2bJli33sWHbX7uHhoXLlyjmU7dmzR+XLl3eKPat7n53LPXcZ8ZQvX95p34vLnnrqKVWsWFF33nmnSpYsqYcffli///57jmMBAIkxLMB1c++99zr8Br1nz54Og8ozlClTRg8//LDuuecelStXTlOmTNHbb7+d5TGbNm2q5s2ba/jw4ddsHYk6deqocuXK+uabb/TKK6/om2++kTHGnshkx2az6fvvv9fy5cv1yy+/aM6cOXr44Yf1wQcfaPny5fLz88t23ElaWppTWZcuXbR06VI9//zzql27tvz8/JSenq42bdpc8dSsvXr10sGDB7Vy5UqnyQ369++viRMnauDAgWrYsKECAwNls9nUtWvX6zYVbHYJoTk/puN6y0hAFi9eLF9fX0lSw4YNJUlFixZVhQoVtHjxYvuA8cwtPLmVk9nvrqXs7v3V/Ewuft7T09Nls9k0e/bsLI+bufXiesrL5y4sLEzr1q3TnDlzNHv2bM2ePVsTJ05Ujx49nCabAIDskLAAeSy7l/APPvjA4bewF6+tcrHg4GBFRUVp48aNl6w3ZMgQNW/eXJ999lnug82h7t276/XXX9f69es1depUVahQQXXr1s3Rvg0aNFCDBg30zjvvaOrUqerevbumTZumRx55xP6b24sX2by4BSA2Nlbz58/X0KFD9cYbb9jLd+zYccXX9N5772nmzJn68ccfVblyZaft33//vXr27KkPPvjAXpaUlOQUa24G+5cpU0br169Xenq6QyvL1q1b7dvzQpkyZbRt2zan8qs9T1hYmD0pKVy4sKpWreowJXKjRo20ZMkS7d+/X+7u7vZkJuN82cVUtGjRy05bnHGMHTt2OLQqHDt27LItTvllx44dDi1FO3fuVHp6un2CgaioKBljFBkZecl1YDJf+2233WYvT0lJUUxMjGrVquVQd+PGjTLGODybWd37K5URz86dO522ZVXm6empdu3aqV27dkpPT9dTTz2lzz77TK+//nqW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VK906dJXHAwAAAAAZJbjhKVs2bJZTlucMXZFssaypKam5l10AAAAAAq0HCcsa9euzbLcGKNp06Zp9OjR8vPzy7PAAAAAACDHCUutWrWcyubNm6eXXnpJ27dv1wsvvKBnn302T4MDAAAAULDlah2WDGvWrNGLL76ov//+W4888oh+++03hYWF5XVsAAAAAAq4XK10v2vXLt1///2qV6+eQkNDtXnzZn388cckKwAAAACuiRwnLE899ZSqVq2q+Ph4/fPPP5o6darKlSt3LWMDAAAAUMDlaqV7b29vVa5c+ZL11qxZkyeB5QdWTgUAAHBtvK8VPDkewzJ48OBrGQcAAAAAOMlxC0tBQMYOAADg2nhfK3iuaJawzBYuXKgzZ86oYcOGCg4OzouYAAAAAEBSLhKW999/X6dPn9Zbb70lyVow8s4779Qff/whSQoLC9P8+fNVrVq1axMpAAAAgAInx7OEffvtt6pevbr9+/fff69Fixbp77//1vHjx3XLLbdo6NCh1yRIAAAAAAVTjhOWmJgY1axZ0/79t99+03333afGjRurSJEieu2117Rs2bJrEiQAAACAginHCUtqaqq8vLzs35ctW6ZGjRrZvxcvXlzHjx/P2+gAAAAAFGg5TliioqK0aNEiSdLevXu1fft2NW3a1L59//79CgkJyfsIAQAAABRYOR5037dvX/Xr109///23li9froYNG6pq1ar27X/++aduuummaxIkAAAAgIIpxwnLo48+Knd3d/3yyy9q2rSp00KSBw8e1MMPP5znAQIAAAAouFg4MhMWIgIAAHBtvK8VPDkew5KVtm3b6tChQ3kVCwAAAAA4uKqEZdGiRUpMTMyrWAAAAADAwVUlLAAAAABwLV1VwlKmTBl5eHjkVSwAAAAA4CDXCcvevXuVMU5/48aNKlWqlCTJGKO9e/fmbXQAAAAACrRcJyyRkZE6duyYU/nJkycVGRmZJ0EBAAAAgHQFCYsxRjabzan89OnT8vb2zpOgAAAAAEDKxcKRzzzzjCTJZrPp9ddfl6+vr31bWlqaVqxYodq1a+d5gAAAAAAKrhwnLGvXrpVktbBs2LBBnp6e9m2enp6qVauWnnvuubyPEAAAAECBleOE5a+//pIk9e7dW6NGjWJlUQAAAADXXI4TlgwTJ068FnEAAAAAgBMWjgQAAADgskhYAAAAALgs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FUy3bt3y65LgQkhY8knPnj2NJKfPX3/9Za+ze/duc+eddxofHx9TtGhR8+yzz5qUlBSH4/z111+mdu3axtPT05QrV85MnDjx+l7IddStWzfTqFGjLLdNmjTJVKlSxfj6+pqAgABTr149h6k2/6tWr15t6tevbwIDA423t7epUqWKeffdd01SUpJDvX///dc0adLEeHl5mRIlSpj33nsvnyK+fiZOnJjlv7HMv6cpqM9NhjFjxpjSpUsbT09PU69ePbN8+fL8Dum6y+4Zyfhv6d69e03Tpk1NkSJFjJeXlylfvrx5/vnnTXx8fP4Gfp3cf//9plixYsbT09OUKFHC3H///Wbnzp327YmJieapp54ywcHBxtfX19xzzz0OvxT4r5szZ46RZLZt2+ZQXhCfm7/++ivLf0s9e/Y0xlhTG7/++usmPDzceHl5mdtvv93pvp04ccJ069bN+Pn5mYCAANO7d2/7L3JRsNmMMea6NecAAAAAQC6wDgsAAAAAl0XCAgAAAMBlkbAAAAAAcFkkLAAAAABcFgkLAAAAAJdFwgIAAADAZZGwAAAAAHBZJCwAAAAAXBYJCwDAwaRJkxQUFJTfYQAAIImEBQCuSvPmzTVw4MAc1f38889Vq1Yt+fn5KSgoSDfddJOGDRtm3z5kyBDZbDY98cQTDvutW7dONptNu3fvliTt3r1bNpsty8/y5cuzPX/meoULF1aFChXUq1cvrV692qHe/fffr+3bt+fsBuTCpk2b1KlTJ5UtW1Y2m00jR47M83MAAP57SFgA4Dr44osvNHDgQA0YMEDr1q3TkiVL9MILL+j06dMO9by9vTVhwgTt2LHjssecN2+eDh065PCpU6fOJfeZOHGiDh06pE2bNmns2LE6ffq06tevr6+++spex8fHR2FhYVd2oZdw9uxZlStXTu+9954iIiLy/PgAgP8mEhYAuEK9evXSwoULNWrUKHvLRUYryMV+/vlndenSRX369FH58uVVrVo1devWTe+8845DvUqVKqlFixZ69dVXL3v+kJAQRUREOHw8PDwuuU9QUJAiIiJUtmxZtWrVSt9//726d++ufv36KTY2VpJzl7AhQ4aodu3a+uKLL1S6dGn5+fnpqaeeUlpamoYPH66IiAiFhYU5XcvF6tatqxEjRqhr167y8vK67PUBACCRsADAFRs1apQaNmyoRx991N7CUapUqSzrRkREaPny5dqzZ89lj/vee+/phx9+0D///JPXIWdp0KBBOnXqlObOnZttnV27dmn27Nn6/fff9c0332jChAlq27at9u/fr4ULF+r999/Xa6+9phUrVlyXmAEABQcJCwBcocDAQHl6esrX19fewuHu7p5l3cGDBysoKEhly5ZVpUqV1KtXL3333XdKT093qnvzzTerS5cuevHFFy95/kaNGsnPz8/hcyUqV64sSdm2DklSenq6vvjiC1WtWlXt2rXT/7d3/y6tQ2EYx5/ai3RIRZQSIhYrFWtrl4wOHSr5D8TFRQoK1lEcnJy66dBV0MVJt04qgogO/pocRNFJBG0RBBcHFekd5Iq9N/WKUW6ufD9QSE9Oct6OT05ems1mdXp6qmKxqEQioVwup0Qioc3NzQ/VAABAPT/+dQEA8N309va+7KRkMhmtrq7Ksizt7u7q6OhI29vb2tnZ0fDwsObn57W2tqaGhtrnR4VCQclkUuvr63X7SZaXl5VMJj3XW61WJT035dcTi8UUDodfvpumqWAwWFO3aZq6vr72XA8AAK8RWADgk62srOjx8VHScwP7a+l0Wul0WuPj4xobG1Mmk9HW1pay2WzNvHg8rtHRUU1NTWlhYcF1nWg0qq6uLs/1npycSJI6Ozvrzvm9NyYQCLiOue0YAQDgBYEFADxobGzU09NTzVhHR8e7rk2lUpKku7s71/PT09OKx+NaWlryVuRfFItFNTU1yXGcL10HAICPILAAgAexWEz7+/s6Pz+XYRhqaWn54/UuScrn82pra1N/f7/a29tVLpdVKBQUiUTU19fnem/TNDUxMaGZmRnX8zc3N6pUKjVjzc3NCoVCdeu9vb1VpVLR/f29zs7ONDc3p1KppMXFxS//s8iHhwcdHx+/HF9eXurw8FCGYXzKThEA4Hui6R4APJicnFQwGFQqlVIkEtHFxYXrPMdxtLe3p8HBQXV3d2tgYEChUEgbGxtqbW198/71mukdx5FlWTWfUqn0Zr25XE6WZamnp0f5fF6GYejg4EBDQ0Pv/s0fdXV1Jdu2Zdu2yuWyZmdnZdu2RkZGvnxtAMD/K1D91W0JAAAAAD7DDgsAAAAA3yKwAAAAAPAtAgsAAAAA3yKwAAAAAPAtAgsAAAAA3yKwAAAAAPAtAgsAAAAA3yKwAAAAAPAtAgsAAAAA3yKwAAAAAPAtAgsAAAAA3/oJHbRxEBWjyR0AAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"EYDqomF2YWyX"},"source":["## Q6: Observe the Attention Weight"]},{"cell_type":"code","execution_count":14,"metadata":{"collapsed":true,"id":"R9nEUAHOYRU_","colab":{"base_uri":"https://localhost:8080/","height":787},"executionInfo":{"status":"ok","timestamp":1754465644793,"user_tz":-480,"elapsed":1906,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}},"outputId":"a2652bca-c8b1-4f51-ad1f-74517273177c"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Import necessary libraries\n","import torch\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import numpy as np\n","from transformers import AutoModelForCausalLM, AutoTokenizer\n","from tqdm import trange\n","from sklearn.decomposition import PCA\n","\n","# Input prompt for text generation\n","prompt = \"Google \"\n","input_ids = tokenizer(prompt, return_tensors=\"pt\")  # Tokenize the input prompt\n","next_token_id = input_ids.input_ids.to(\"cuda\")  # Move input token ids to GPU\n","attention_mask = input_ids.attention_mask.to(\"cuda\")  # Move attention mask to GPU\n","cache_position = torch.arange(attention_mask.shape[1], device=\"cuda\")  # Position for the KV cache\n","\n","# Set the number of tokens to generate and other parameters\n","generation_tokens = 20  # Limit for visualization (number of tokens to generate)\n","total_tokens = generation_tokens + next_token_id.size(1) - 1  # Total tokens to handle\n","layer_idx = 10  # Specify the layer index for attention visualization\n","head_idx = 7  # Specify the attention head index to visualize\n","\n","# KV cache setup for caching key/values across time steps\n","from transformers.cache_utils import HybridCache\n","kv_cache = HybridCache(config=model.config, max_batch_size=1, max_cache_len=total_tokens, device=\"cuda\", dtype=torch.float16)\n","\n","generated_tokens = []  # List to store generated tokens\n","attentions = None  # Placeholder to store attention weights\n","\n","num_new_tokens = 0  # Counter for the number of new tokens generated\n","model.eval()  # Set the model to evaluation mode\n","\n","# Generate tokens and collect attention weights for visualization\n","for num_new_tokens in range(generation_tokens):\n","    with torch.no_grad():  # Disable gradients during inference for efficiency\n","        # Pass the input through the model to get the next token prediction and attention weights\n","        outputs = model(\n","            next_token_id,\n","            attention_mask=attention_mask,\n","            cache_position=cache_position,\n","            use_cache=True,  # Use the KV cache for efficiency\n","            past_key_values=kv_cache,  # Provide the cached key-value pairs for fast inference\n","            output_attentions=True  # Enable the extraction of attention weights\n","        )\n","\n","    ######################## TODO (Q6.1 ~ 6.4) ########################\n","    ### You can refer to https://huggingface.co/docs/transformers/en/main_classes/output#transformers.modeling_outputs.BaseModelOutput.attentions to see the structure of model output attentions\n","    # Get the logits for the last generated token from outputs\n","    logits = outputs.logits[:, -1, :]\n","    # Extract the attention scores from the model's outputs\n","    attention_scores = outputs.attentions\n","    ###################################################################\n","\n","    # Extract attention weights for the specified layer and head\n","    last_layer_attention = attention_scores[layer_idx][0][head_idx].detach().cpu().numpy()\n","\n","    # If it's the first generated token, initialize the attentions array\n","    if num_new_tokens == 0:\n","        attentions = last_layer_attention\n","    else:\n","        # Append the current attention weights to the existing array\n","        attentions = np.append(attentions, last_layer_attention, axis=0)\n","\n","    # Choose the next token to generate based on the highest probability (logits)\n","    next_token_id = logits.argmax(dim=-1)\n","    generated_tokens.append(next_token_id.item())  # Add the token ID to the generated tokens list\n","\n","    # Update the attention mask and next token ID for the next iteration\n","    attention_mask = torch.cat([attention_mask, torch.ones(1, 1, device=\"cuda\")], dim=-1)  # Add a new attention mask for the generated token\n","    next_token_id = next_token_id.unsqueeze(0)  # Convert the token ID to the required shape\n","\n","    # Update the KV cache with the new past key-values\n","    kv_cache = outputs.past_key_values\n","    cache_position = cache_position[-1:] + 1  # Update the cache position for the next iteration\n","\n","# Decode the generated tokens into human-readable text\n","generated_text = tokenizer.decode(generated_tokens, skip_special_tokens=True)\n","full_text = prompt + generated_text  # Combine the prompt with the generated text\n","\n","# Tokenize all the generated text (prompt + generated)\n","tokens = tokenizer.tokenize(full_text)\n","\n","# Function to plot a heatmap of attention weights\n","def plot_attention(attn_matrix, tokens, title=\"Attention Heatmap\"):\n","    plt.figure(figsize=(10, 8))  # Set the figure size\n","    sns.heatmap(attn_matrix, xticklabels=tokens, yticklabels=tokens, cmap=\"viridis\", annot=False)  # Plot the attention matrix as a heatmap\n","    plt.xlabel(\"Key Tokens\")\n","    plt.ylabel(\"Query Tokens\")\n","    plt.title(title)\n","    plt.xticks(rotation=45)  # Rotate x-axis labels for better visibility\n","    plt.yticks(rotation=0)  # Rotate y-axis labels\n","    plt.show()\n","\n","# Plot the attention heatmap for the last generated token\n","plot_attention(attentions, tokens, title=f\"Attention Weights for Generated Token of Layer {layer_idx}\")"]},{"cell_type":"markdown","metadata":{"id":"zz2z5Q4TYlyE"},"source":["## Q7: Observe the Activation Scores"]},{"cell_type":"markdown","source":["The following code is referred from official Gemma tutorials: [Gemma Tutorial From Scratch](https://colab.research.google.com/drive/17dQFYUYnuKnP6OwQPH9v_GSYUW5aj-Rp#scrollTo=2-i7YRVLgKoT) and [SAELens](https://github.com/jbloomAus/SAELens/blob/main/tutorials/tutorial_2_0.ipynb)"],"metadata":{"id":"Q2li0_FBwbit"}},{"cell_type":"code","execution_count":1,"metadata":{"collapsed":true,"id":"1a3DM4RXYxcE","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1754465813097,"user_tz":-480,"elapsed":12830,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}},"outputId":"7d2b4d9b-820a-4a03-f7c7-d2303a79130b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: sae-lens in /usr/local/lib/python3.11/dist-packages (6.5.1)\n","Requirement already satisfied: automated-interpretability<1.0.0,>=0.0.5 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (0.0.13)\n","Requirement already satisfied: babe<0.0.8,>=0.0.7 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (0.0.7)\n","Requirement already satisfied: datasets<3.0.0,>=2.17.1 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (2.21.0)\n","Requirement already satisfied: matplotlib<4.0.0,>=3.8.3 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (3.10.0)\n","Requirement already satisfied: matplotlib-inline<0.2.0,>=0.1.6 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (0.1.7)\n","Requirement already satisfied: nltk<4.0.0,>=3.8.1 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (3.9.1)\n","Requirement already satisfied: plotly<6.0.0,>=5.19.0 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (5.24.1)\n","Requirement already satisfied: plotly-express<0.5.0,>=0.4.1 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (0.4.1)\n","Requirement already satisfied: pytest-profiling<2.0.0,>=1.7.0 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (1.8.1)\n","Requirement already satisfied: python-dotenv<2.0.0,>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (1.1.1)\n","Requirement already satisfied: pyyaml<7.0.0,>=6.0.1 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (6.0.2)\n","Requirement already satisfied: pyzmq==26.0.0 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (26.0.0)\n","Requirement already satisfied: safetensors<0.5.0,>=0.4.2 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (0.4.5)\n","Requirement already satisfied: simple-parsing<0.2.0,>=0.1.6 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (0.1.7)\n","Requirement already satisfied: transformer-lens<3.0.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (2.16.1)\n","Requirement already satisfied: transformers<5.0.0,>=4.38.1 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (4.55.0)\n","Requirement already satisfied: typer<0.13.0,>=0.12.3 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (0.12.5)\n","Requirement already satisfied: typing-extensions<5.0.0,>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (4.14.1)\n","Requirement already satisfied: zstandard<0.23.0,>=0.22.0 in /usr/local/lib/python3.11/dist-packages (from sae-lens) (0.22.0)\n","Requirement already satisfied: blobfile<3.0.0,>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from automated-interpretability<1.0.0,>=0.0.5->sae-lens) (2.1.1)\n","Requirement already satisfied: boostedblob<0.16.0,>=0.15.3 in /usr/local/lib/python3.11/dist-packages (from automated-interpretability<1.0.0,>=0.0.5->sae-lens) (0.15.6)\n","Requirement already satisfied: httpx<0.28.0,>=0.27.0 in /usr/local/lib/python3.11/dist-packages (from automated-interpretability<1.0.0,>=0.0.5->sae-lens) (0.27.2)\n","Requirement already satisfied: numpy<2.0.0,>=1.24.0 in /usr/local/lib/python3.11/dist-packages (from automated-interpretability<1.0.0,>=0.0.5->sae-lens) (1.26.4)\n","Requirement already satisfied: orjson<4.0.0,>=3.10.1 in /usr/local/lib/python3.11/dist-packages (from automated-interpretability<1.0.0,>=0.0.5->sae-lens) (3.11.1)\n","Requirement already satisfied: scikit-learn<2.0.0,>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from automated-interpretability<1.0.0,>=0.0.5->sae-lens) (1.6.1)\n","Requirement already satisfied: tiktoken>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from automated-interpretability<1.0.0,>=0.0.5->sae-lens) (0.9.0)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (from babe<0.0.8,>=0.0.7->sae-lens) (2.2.2)\n","Requirement already satisfied: py2store in /usr/local/lib/python3.11/dist-packages (from babe<0.0.8,>=0.0.7->sae-lens) (0.1.20)\n","Requirement already satisfied: graze in /usr/local/lib/python3.11/dist-packages (from babe<0.0.8,>=0.0.7->sae-lens) (0.1.29)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from datasets<3.0.0,>=2.17.1->sae-lens) (3.18.0)\n","Requirement already satisfied: pyarrow>=15.0.0 in /usr/local/lib/python3.11/dist-packages (from datasets<3.0.0,>=2.17.1->sae-lens) (18.1.0)\n","Requirement already satisfied: dill<0.3.9,>=0.3.0 in /usr/local/lib/python3.11/dist-packages (from datasets<3.0.0,>=2.17.1->sae-lens) (0.3.8)\n","Requirement already satisfied: requests>=2.32.2 in /usr/local/lib/python3.11/dist-packages (from datasets<3.0.0,>=2.17.1->sae-lens) (2.32.3)\n","Requirement already satisfied: tqdm>=4.66.3 in /usr/local/lib/python3.11/dist-packages (from datasets<3.0.0,>=2.17.1->sae-lens) (4.67.1)\n","Requirement already satisfied: xxhash in /usr/local/lib/python3.11/dist-packages (from datasets<3.0.0,>=2.17.1->sae-lens) (3.5.0)\n","Requirement already satisfied: multiprocess in /usr/local/lib/python3.11/dist-packages (from datasets<3.0.0,>=2.17.1->sae-lens) (0.70.16)\n","Requirement already satisfied: fsspec<=2024.6.1,>=2023.1.0 in /usr/local/lib/python3.11/dist-packages (from fsspec[http]<=2024.6.1,>=2023.1.0->datasets<3.0.0,>=2.17.1->sae-lens) (2024.6.1)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.11/dist-packages (from datasets<3.0.0,>=2.17.1->sae-lens) (3.12.14)\n","Requirement already satisfied: huggingface-hub>=0.21.2 in /usr/local/lib/python3.11/dist-packages (from datasets<3.0.0,>=2.17.1->sae-lens) (0.34.1)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from datasets<3.0.0,>=2.17.1->sae-lens) (25.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib<4.0.0,>=3.8.3->sae-lens) (1.3.2)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib<4.0.0,>=3.8.3->sae-lens) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib<4.0.0,>=3.8.3->sae-lens) (4.59.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib<4.0.0,>=3.8.3->sae-lens) (1.4.8)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib<4.0.0,>=3.8.3->sae-lens) (11.3.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib<4.0.0,>=3.8.3->sae-lens) (3.2.3)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib<4.0.0,>=3.8.3->sae-lens) (2.9.0.post0)\n","Requirement already satisfied: traitlets in /usr/local/lib/python3.11/dist-packages (from matplotlib-inline<0.2.0,>=0.1.6->sae-lens) (5.7.1)\n","Requirement already satisfied: click in /usr/local/lib/python3.11/dist-packages (from nltk<4.0.0,>=3.8.1->sae-lens) (8.2.1)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.11/dist-packages (from nltk<4.0.0,>=3.8.1->sae-lens) (1.5.1)\n","Requirement already satisfied: regex>=2021.8.3 in /usr/local/lib/python3.11/dist-packages (from nltk<4.0.0,>=3.8.1->sae-lens) (2024.11.6)\n","Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from plotly<6.0.0,>=5.19.0->sae-lens) (8.5.0)\n","Requirement already satisfied: statsmodels>=0.9.0 in /usr/local/lib/python3.11/dist-packages (from plotly-express<0.5.0,>=0.4.1->sae-lens) (0.14.5)\n","Requirement already satisfied: scipy>=0.18 in /usr/local/lib/python3.11/dist-packages (from plotly-express<0.5.0,>=0.4.1->sae-lens) (1.16.0)\n","Requirement already satisfied: patsy>=0.5 in /usr/local/lib/python3.11/dist-packages (from plotly-express<0.5.0,>=0.4.1->sae-lens) (1.0.1)\n","Requirement already satisfied: six in /usr/local/lib/python3.11/dist-packages (from pytest-profiling<2.0.0,>=1.7.0->sae-lens) (1.17.0)\n","Requirement already satisfied: pytest in /usr/local/lib/python3.11/dist-packages (from pytest-profiling<2.0.0,>=1.7.0->sae-lens) (8.4.1)\n","Requirement already satisfied: gprof2dot in /usr/local/lib/python3.11/dist-packages (from pytest-profiling<2.0.0,>=1.7.0->sae-lens) (2025.4.14)\n","Requirement already satisfied: docstring-parser<1.0,>=0.15 in /usr/local/lib/python3.11/dist-packages (from simple-parsing<0.2.0,>=0.1.6->sae-lens) (0.17.0)\n","Requirement already satisfied: accelerate>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from transformer-lens<3.0.0,>=2.0.0->sae-lens) (1.9.0)\n","Requirement already satisfied: beartype<0.15.0,>=0.14.1 in /usr/local/lib/python3.11/dist-packages (from transformer-lens<3.0.0,>=2.0.0->sae-lens) (0.14.1)\n","Requirement already satisfied: better-abc<0.0.4,>=0.0.3 in /usr/local/lib/python3.11/dist-packages (from transformer-lens<3.0.0,>=2.0.0->sae-lens) (0.0.3)\n","Requirement already satisfied: einops>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from transformer-lens<3.0.0,>=2.0.0->sae-lens) (0.8.1)\n","Requirement already satisfied: fancy-einsum>=0.0.3 in /usr/local/lib/python3.11/dist-packages (from transformer-lens<3.0.0,>=2.0.0->sae-lens) (0.0.3)\n","Requirement already satisfied: jaxtyping>=0.2.11 in /usr/local/lib/python3.11/dist-packages (from transformer-lens<3.0.0,>=2.0.0->sae-lens) (0.3.2)\n","Requirement already satisfied: rich>=12.6.0 in /usr/local/lib/python3.11/dist-packages (from transformer-lens<3.0.0,>=2.0.0->sae-lens) (13.9.4)\n","Requirement already satisfied: sentencepiece in /usr/local/lib/python3.11/dist-packages (from transformer-lens<3.0.0,>=2.0.0->sae-lens) (0.2.0)\n","Requirement already satisfied: torch>=2.6 in /usr/local/lib/python3.11/dist-packages (from transformer-lens<3.0.0,>=2.0.0->sae-lens) (2.6.0+cu124)\n","Requirement already satisfied: transformers-stream-generator<0.0.6,>=0.0.5 in /usr/local/lib/python3.11/dist-packages (from transformer-lens<3.0.0,>=2.0.0->sae-lens) (0.0.5)\n","Requirement already satisfied: typeguard<5.0,>=4.2 in /usr/local/lib/python3.11/dist-packages (from transformer-lens<3.0.0,>=2.0.0->sae-lens) (4.4.4)\n","Requirement already satisfied: wandb>=0.13.5 in /usr/local/lib/python3.11/dist-packages (from transformer-lens<3.0.0,>=2.0.0->sae-lens) (0.21.0)\n","Requirement already satisfied: tokenizers<0.22,>=0.21 in /usr/local/lib/python3.11/dist-packages (from transformers<5.0.0,>=4.38.1->sae-lens) (0.21.2)\n","Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.11/dist-packages (from typer<0.13.0,>=0.12.3->sae-lens) (1.5.4)\n","Requirement already satisfied: psutil in /usr/local/lib/python3.11/dist-packages (from accelerate>=0.23.0->transformer-lens<3.0.0,>=2.0.0->sae-lens) (5.9.5)\n","Requirement already satisfied: pycryptodomex~=3.8 in /usr/local/lib/python3.11/dist-packages (from blobfile<3.0.0,>=2.1.1->automated-interpretability<1.0.0,>=0.0.5->sae-lens) (3.23.0)\n","Requirement already satisfied: urllib3<3,>=1.25.3 in /usr/local/lib/python3.11/dist-packages (from blobfile<3.0.0,>=2.1.1->automated-interpretability<1.0.0,>=0.0.5->sae-lens) (2.5.0)\n","Requirement already satisfied: lxml~=4.9 in /usr/local/lib/python3.11/dist-packages (from blobfile<3.0.0,>=2.1.1->automated-interpretability<1.0.0,>=0.0.5->sae-lens) (4.9.4)\n","Requirement already satisfied: uvloop>=0.16.0 in /usr/local/lib/python3.11/dist-packages (from boostedblob<0.16.0,>=0.15.3->automated-interpretability<1.0.0,>=0.0.5->sae-lens) (0.21.0)\n","Requirement already satisfied: aiohappyeyeballs>=2.5.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets<3.0.0,>=2.17.1->sae-lens) (2.6.1)\n","Requirement already satisfied: aiosignal>=1.4.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets<3.0.0,>=2.17.1->sae-lens) (1.4.0)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets<3.0.0,>=2.17.1->sae-lens) (25.3.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets<3.0.0,>=2.17.1->sae-lens) (1.7.0)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets<3.0.0,>=2.17.1->sae-lens) (6.6.3)\n","Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets<3.0.0,>=2.17.1->sae-lens) (0.3.2)\n","Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp->datasets<3.0.0,>=2.17.1->sae-lens) (1.20.1)\n","Requirement already satisfied: anyio in /usr/local/lib/python3.11/dist-packages (from httpx<0.28.0,>=0.27.0->automated-interpretability<1.0.0,>=0.0.5->sae-lens) (4.9.0)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.11/dist-packages (from httpx<0.28.0,>=0.27.0->automated-interpretability<1.0.0,>=0.0.5->sae-lens) (2025.7.14)\n","Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.11/dist-packages (from httpx<0.28.0,>=0.27.0->automated-interpretability<1.0.0,>=0.0.5->sae-lens) (1.0.9)\n","Requirement already satisfied: idna in /usr/local/lib/python3.11/dist-packages (from httpx<0.28.0,>=0.27.0->automated-interpretability<1.0.0,>=0.0.5->sae-lens) (3.10)\n","Requirement already satisfied: sniffio in /usr/local/lib/python3.11/dist-packages (from httpx<0.28.0,>=0.27.0->automated-interpretability<1.0.0,>=0.0.5->sae-lens) (1.3.1)\n","Requirement already satisfied: h11>=0.16 in /usr/local/lib/python3.11/dist-packages (from httpcore==1.*->httpx<0.28.0,>=0.27.0->automated-interpretability<1.0.0,>=0.0.5->sae-lens) (0.16.0)\n","Requirement already satisfied: hf-xet<2.0.0,>=1.1.3 in /usr/local/lib/python3.11/dist-packages (from huggingface-hub>=0.21.2->datasets<3.0.0,>=2.17.1->sae-lens) (1.1.5)\n","Requirement already satisfied: wadler-lindig>=0.1.3 in /usr/local/lib/python3.11/dist-packages (from jaxtyping>=0.2.11->transformer-lens<3.0.0,>=2.0.0->sae-lens) (0.1.7)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas->babe<0.0.8,>=0.0.7->sae-lens) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas->babe<0.0.8,>=0.0.7->sae-lens) (2025.2)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.32.2->datasets<3.0.0,>=2.17.1->sae-lens) (3.4.2)\n","Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich>=12.6.0->transformer-lens<3.0.0,>=2.0.0->sae-lens) (3.0.0)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich>=12.6.0->transformer-lens<3.0.0,>=2.0.0->sae-lens) (2.19.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn<2.0.0,>=1.2.0->automated-interpretability<1.0.0,>=0.0.5->sae-lens) (3.6.0)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (3.5)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (3.1.6)\n","Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (12.4.127)\n","Requirement already satisfied: nvidia-cuda-runtime-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (12.4.127)\n","Requirement already satisfied: nvidia-cuda-cupti-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (12.4.127)\n","Requirement already satisfied: nvidia-cudnn-cu12==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (9.1.0.70)\n","Requirement already satisfied: nvidia-cublas-cu12==12.4.5.8 in /usr/local/lib/python3.11/dist-packages (from torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (12.4.5.8)\n","Requirement already satisfied: nvidia-cufft-cu12==11.2.1.3 in /usr/local/lib/python3.11/dist-packages (from torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (11.2.1.3)\n","Requirement already satisfied: nvidia-curand-cu12==10.3.5.147 in /usr/local/lib/python3.11/dist-packages (from torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (10.3.5.147)\n","Requirement already satisfied: nvidia-cusolver-cu12==11.6.1.9 in /usr/local/lib/python3.11/dist-packages (from torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (11.6.1.9)\n","Requirement already satisfied: nvidia-cusparse-cu12==12.3.1.170 in /usr/local/lib/python3.11/dist-packages (from torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (12.3.1.170)\n","Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (0.6.2)\n","Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (2.21.5)\n","Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (12.4.127)\n","Requirement already satisfied: nvidia-nvjitlink-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (12.4.127)\n","Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (3.2.0)\n","Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (1.13.1)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (1.3.0)\n","Requirement already satisfied: gitpython!=3.1.29,>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb>=0.13.5->transformer-lens<3.0.0,>=2.0.0->sae-lens) (3.1.45)\n","Requirement already satisfied: platformdirs in /usr/local/lib/python3.11/dist-packages (from wandb>=0.13.5->transformer-lens<3.0.0,>=2.0.0->sae-lens) (4.3.8)\n","Requirement already satisfied: protobuf!=4.21.0,!=5.28.0,<7,>=3.19.0 in /usr/local/lib/python3.11/dist-packages (from wandb>=0.13.5->transformer-lens<3.0.0,>=2.0.0->sae-lens) (5.29.5)\n","Requirement already satisfied: pydantic<3 in /usr/local/lib/python3.11/dist-packages (from wandb>=0.13.5->transformer-lens<3.0.0,>=2.0.0->sae-lens) (2.11.7)\n","Requirement already satisfied: sentry-sdk>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from wandb>=0.13.5->transformer-lens<3.0.0,>=2.0.0->sae-lens) (2.33.2)\n","Requirement already satisfied: dol in /usr/local/lib/python3.11/dist-packages (from graze->babe<0.0.8,>=0.0.7->sae-lens) (0.3.19)\n","Requirement already satisfied: config2py in /usr/local/lib/python3.11/dist-packages (from py2store->babe<0.0.8,>=0.0.7->sae-lens) (0.1.37)\n","Requirement already satisfied: importlib-resources in /usr/local/lib/python3.11/dist-packages (from py2store->babe<0.0.8,>=0.0.7->sae-lens) (6.5.2)\n","Requirement already satisfied: iniconfig>=1 in /usr/local/lib/python3.11/dist-packages (from pytest->pytest-profiling<2.0.0,>=1.7.0->sae-lens) (2.1.0)\n","Requirement already satisfied: pluggy<2,>=1.5 in /usr/local/lib/python3.11/dist-packages (from pytest->pytest-profiling<2.0.0,>=1.7.0->sae-lens) (1.6.0)\n","Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython!=3.1.29,>=1.0.0->wandb>=0.13.5->transformer-lens<3.0.0,>=2.0.0->sae-lens) (4.0.12)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich>=12.6.0->transformer-lens<3.0.0,>=2.0.0->sae-lens) (0.1.2)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3->wandb>=0.13.5->transformer-lens<3.0.0,>=2.0.0->sae-lens) (0.7.0)\n","Requirement already satisfied: pydantic-core==2.33.2 in /usr/local/lib/python3.11/dist-packages (from pydantic<3->wandb>=0.13.5->transformer-lens<3.0.0,>=2.0.0->sae-lens) (2.33.2)\n","Requirement already satisfied: typing-inspection>=0.4.0 in /usr/local/lib/python3.11/dist-packages (from pydantic<3->wandb>=0.13.5->transformer-lens<3.0.0,>=2.0.0->sae-lens) (0.4.1)\n","Requirement already satisfied: i2 in /usr/local/lib/python3.11/dist-packages (from config2py->py2store->babe<0.0.8,>=0.0.7->sae-lens) (0.1.48)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch>=2.6->transformer-lens<3.0.0,>=2.0.0->sae-lens) (3.0.2)\n","Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.29,>=1.0.0->wandb>=0.13.5->transformer-lens<3.0.0,>=2.0.0->sae-lens) (5.0.2)\n"]}],"source":["!pip install sae-lens"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"v8iz9tluYuQy"},"outputs":[],"source":["from sae_lens import SAE\n","\n","sae, cfg_dict, sparsity = SAE.from_pretrained(\n","    release = \"gemma-scope-2b-pt-res-canonical\",\n","    sae_id = \"layer_20/width_16k/canonical\",\n",")\n","\n","print(sae, cfg_dict, sparsity)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"2YusIpmQYk-k","executionInfo":{"status":"aborted","timestamp":1754465666292,"user_tz":-480,"elapsed":5,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}}},"outputs":[],"source":["from IPython.display import IFrame\n","html_template = \"https://neuronpedia.org/{}/{}/{}?embed=true&embedexplanation=true&embedplots=true&embedtest=true&height=300\"\n","\n","def get_dashboard_html(sae_release = \"gemma-2-2b\", sae_id=\"20-gemmascope-res-16k\", feature_idx=0):\n","    return html_template.format(sae_release, sae_id, feature_idx)\n","\n","########################## TODO (Q7.1) ############################\n","html = get_dashboard_html(sae_release = \"gemma-2-2b\", sae_id=\"20-gemmascope-res-16k\", feature_idx=10004)\n","IFrame(html, width=1200, height=600)\n","###################################################################"]},{"cell_type":"markdown","source":["## Q7.2~7.3: Maximum activations comparison"],"metadata":{"id":"51VLXHjtGRLN"}},{"cell_type":"code","source":["######################## (Q7.2 ~ 7.3) ########################\n","\n","def get_max_activation(model, tokenizer, sae, prompt, feature_idx=10004):\n","    \"\"\"\n","    Computes the maximum activation of a specific feature in a Sparse Autoencoder (SAE)\n","    for a given prompt.\n","\n","    Args:\n","        model: The Transformer model used for generating hidden states.\n","        tokenizer: The tokenizer for encoding the prompt.\n","        sae: The Sparse Autoencoder for encoding hidden states.\n","        prompt (str): The input text prompt.\n","        feature_idx (int, optional): The index of the feature in SAE. Defaults to 10004.\n","\n","    Returns:\n","        float: The maximum activation value for the specified feature index.\n","    \"\"\"\n","    device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","    sae.to(device)\n","\n","    # Tokenize the input prompt and get model outputs\n","    tokens = tokenizer.encode(prompt, return_tensors=\"pt\").to(model.device)\n","    outputs = model(tokens, output_hidden_states=True)\n","\n","    # Extract hidden states from the specified layer\n","    hidden_states = outputs.hidden_states[sae.cfg.hook_layer]\n","\n","    # Encode hidden states using SAE\n","    sae_in = hidden_states\n","    feature_acts = sae.encode(sae_in).squeeze()  # Shape: (batch_size * seq_len, num_features)\n","    feature_acts = feature_acts.reshape(-1, feature_acts.shape[-1])\n","\n","    # Compute max activation for the specified feature index\n","    max_activation = -float(\"inf\")\n","    batch_max_activation = feature_acts[:, feature_idx].max().item()\n","    max_activation = max(max_activation, batch_max_activation)\n","\n","    # Plot activation distribution\n","    plt.figure(figsize=(8, 5))\n","    plt.hist(feature_acts[:, feature_idx].cpu().detach().numpy(), bins=50, alpha=0.75, color='blue', edgecolor='black')\n","    plt.xlabel(f\"Activation values (Feature {feature_idx})\")\n","    plt.ylabel(\"Frequency\")\n","    plt.title(f\"Activation Distribution for Feature {feature_idx} - Prompt: '{prompt}'\")\n","    plt.grid(True)\n","    plt.show()\n","\n","    return max_activation\n","\n","feature_idx = 10004\n","# Define the prompts\n","prompt_a = \"Time travel offers me the opportunity to correct past errors, but it comes with its own set of risks.\"\n","prompt_b = \"I accept that my decisions shape my future, and though mistakes are inevitable, they define who I become.\"\n","\n","# Calculate the maximum activations for each prompt using the feature index\n","max_activation_a = get_max_activation(model, tokenizer, sae, prompt_a, feature_idx=feature_idx)\n","max_activation_b = get_max_activation(model, tokenizer, sae, prompt_b, feature_idx=feature_idx)\n","\n","# Print the comparison\n","print(f\"max_activation for prompt_a: {max_activation_a}\")\n","print(f\"max_activation for prompt_b: {max_activation_b}\")\n","###########################################################"],"metadata":{"id":"iLuW-Hk55qJb","executionInfo":{"status":"aborted","timestamp":1754465666294,"user_tz":-480,"elapsed":6,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q7.4~7.6: Activation distribution for specific layer"],"metadata":{"id":"gFg9hOKzGW8y"}},{"cell_type":"code","source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","def plot_token_activations(model, tokenizer, sae, prompt, feature_idx=10004, layer_idx=0):\n","    \"\"\"\n","    Plots activations for each token in a specific layer.\n","\n","    Args:\n","        model: The transformer model.\n","        tokenizer: Tokenizer for encoding input text.\n","        sae: Sparse Autoencoder model.\n","        prompt: Input text string.\n","        feature_idx: Index of the feature to analyze.\n","        layer_idx: Layer to analyze (None uses sae.cfg.hook_layer).\n","    \"\"\"\n","    device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","    sae.to(device)\n","\n","    # Tokenize input and get model output\n","    tokens = tokenizer(prompt, return_tensors=\"pt\")\n","    token_ids = tokens[\"input_ids\"].to(device)\n","    token_list = tokenizer.convert_ids_to_tokens(token_ids.squeeze().tolist())\n","\n","    outputs = model(token_ids, output_hidden_states=True)\n","\n","    # Choose layer\n","    layer_idx = layer_idx if layer_idx is not None else sae.cfg.hook_layer\n","    hidden_states = outputs.hidden_states[layer_idx]\n","\n","    # Pass through SAE\n","    sae_in = hidden_states\n","    feature_acts = sae.encode(sae_in).squeeze()  # (batch_size, seq_len, num_features)\n","    print(f\"feature_acts shape: {feature_acts.shape}\")\n","\n","    # Extract activations for the chosen feature\n","    activations = feature_acts[:, feature_idx].squeeze().cpu().detach().numpy()\n","\n","    # Plot\n","    plt.figure(figsize=(10, 5))\n","    plt.bar(range(len(token_list)), activations, color='blue', alpha=0.7)\n","    plt.xticks(range(len(token_list)), token_list, rotation=45)\n","    plt.xlabel(\"Tokens\")\n","    plt.ylabel(f\"Activation Value (Feature {feature_idx})\")\n","    plt.title(f\"Token-wise Activations for Layer {layer_idx}\")\n","    plt.grid(True)\n","    plt.show()\n","\n","######################## (Q7.4 ~ 7.6) ########################\n","# Simply observe the figure\n","layer_idx = 24\n","prompt = \"Time travel will become a reality as technology continues to advance.\"\n","plot_token_activations(model, tokenizer, sae, prompt, feature_idx, layer_idx)\n","###################################################################"],"metadata":{"id":"Ms4lv2S552IS","executionInfo":{"status":"aborted","timestamp":1754465666295,"user_tz":-480,"elapsed":6,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}}},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Q7.7~7.9: Activation distribution for specific token"],"metadata":{"id":"EwLP2sXZGcrb"}},{"cell_type":"code","source":["def plot_layer_activations(model, tokenizer, sae, prompt, token_idx=0, feature_idx=10004):\n","    \"\"\"\n","    Plots activations of a specific token across all layers.\n","\n","    Args:\n","        model: The transformer model.\n","        tokenizer: Tokenizer for encoding input text.\n","        sae: Sparse Autoencoder model.\n","        prompt: Input text string.\n","        token_idx: Index of the token to analyze.\n","        feature_idx: Index of the feature to analyze.\n","    \"\"\"\n","    device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\n","    sae.to(device)\n","\n","    # Tokenize input and get model output\n","    tokens = tokenizer(prompt, return_tensors=\"pt\")\n","    token_ids = tokens[\"input_ids\"].to(device)\n","    token_list = tokenizer.convert_ids_to_tokens(token_ids.squeeze().tolist())\n","\n","    outputs = model(token_ids, output_hidden_states=True)\n","\n","    # Collect activations across all layers\n","    num_layers = len(outputs.hidden_states)\n","    activations = []\n","\n","    for layer_idx in range(num_layers):\n","        hidden_states = outputs.hidden_states[layer_idx]\n","        sae_in = hidden_states\n","        feature_acts = sae.encode(sae_in).squeeze()  # (batch_size, seq_len, num_features)\n","        # print(f\"feature_acts shape: {feature_acts.shape}\")\n","        activations.append(feature_acts[token_idx, feature_idx].item())\n","\n","    # Plot\n","    plt.figure(figsize=(8, 5))\n","    plt.plot(range(num_layers), activations, marker=\"o\", linestyle=\"-\", color=\"blue\")\n","    plt.xlabel(\"Layer\")\n","    plt.ylabel(f\"Activation Value (Feature {feature_idx})\")\n","    plt.title(f\"Activation Across Layers for Token '{token_list[token_idx]}'\")\n","    plt.xticks(range(num_layers))\n","    plt.grid(True)\n","    plt.show()\n","\n","######################## (Q7.7 ~ 7.9) ########################\n","# Alter the token index to observe the figure\n","token_idx = 1\n","prompt = \"Time travel will become a reality as technology continues to advance.\"\n","plot_layer_activations(model, tokenizer, sae, prompt, token_idx)\n","###################################################################"],"metadata":{"id":"WjssMqTi55km","executionInfo":{"status":"aborted","timestamp":1754465666296,"user_tz":-480,"elapsed":220891,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TRnwdCdjdEva","executionInfo":{"status":"ok","timestamp":1754468413552,"user_tz":-480,"elapsed":35291,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}},"outputId":"84d35dd2-96b2-4c7e-a59b-b4a7bc5c1447"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["import os\n","\n","# Step 0: 进入 /content，避免路径错误\n","os.chdir(\"/content\")\n","print(\"Current directory:\", os.getcwd())\n","\n","# Step 1: 删除旧仓库目录（防止冲突）\n","!rm -rf /content/course_li\n","\n","# Step 2: 配置 Git 用户信息\n","!git config --global user.name \"cnlyj6\"\n","!git config --global user.email \"g1910198192@gmail.com\"\n","\n","# Step 3: 输入 Token\n","from getpass import getpass\n","token = getpass(\"GitHub Token: \")\n","\n","# Step 4: Clone 仓库（带用户名和token）\n","repo_url = f\"https://cnlyj6:{token}@github.com/cnlyj6/course_li.git\"\n","!git clone {repo_url}\n","\n","# Step 5: 查看 /content 目录确认仓库目录是否创建成功\n","print(\"Files in /content after clone:\")\n","!ls /content/\n","\n","# Step 6: 如果目录存在，进入目录继续提交推送操作\n","if os.path.exists(\"/content/course_li\"):\n","    # 创建上传文件\n","    with open(\"/content/MLHW3_understanding_LLM_transformers\", \"w\") as f:\n","        f.write(\"这是从 Colab 上传的内容。\\n\")\n","\n","    # 复制文件到仓库目录\n","    !cp /content/MLHW3_understanding_LLM_transformers /content/course_li/\n","\n","    # 进入仓库目录，提交并推送\n","    os.chdir(\"/content/course_li\")\n","    !git add MLHW3_understanding_LLM_transformers\n","    !git commit -m \"📤 Upload from Colab\"\n","    !git push origin main\n","else:\n","    print(\"Error: Repo directory not found. Clone failed.\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tr5GOkIIUHBM","executionInfo":{"status":"ok","timestamp":1754468126975,"user_tz":-480,"elapsed":11412,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}},"outputId":"3a681974-3597-4d62-8fff-e287910615e4"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Current directory: /content\n","GitHub Token: ··········\n","Cloning into 'course_li'...\n","remote: Enumerating objects: 3, done.\u001b[K\n","remote: Counting objects: 100% (3/3), done.\u001b[K\n","remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)\u001b[K\n","Receiving objects: 100% (3/3), done.\n","Files in /content after clone:\n","course_li  MLHW3_understanding_LLM_transformers  sample_data\n","[main eabcf5c] 📤 Upload from Colab\n"," 1 file changed, 1 insertion(+)\n"," create mode 100644 MLHW3_understanding_LLM_transformers\n","Enumerating objects: 4, done.\n","Counting objects: 100% (4/4), done.\n","Delta compression using up to 2 threads\n","Compressing objects: 100% (2/2), done.\n","Writing objects: 100% (3/3), 350 bytes | 350.00 KiB/s, done.\n","Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\n","To https://github.com/cnlyj6/course_li.git\n","   5e92127..eabcf5c  main -> main\n"]}]},{"cell_type":"code","source":["import os\n","import shutil\n","import subprocess\n","from getpass import getpass\n","\n","# ========== 配置部分 ==========\n","GIT_USERNAME = \"cnlyj6\"\n","GIT_EMAIL = \"g1910198192@gmail.com\"\n","REPO_NAME = \"course_li\"\n","SOURCE_DIR = \"/content/drive/MyDrive/hw3\"\n","CLONE_DIR = f\"/content/{REPO_NAME}\"\n","\n","# ========== 初始化 ==========\n","# 删除旧 clone 目录\n","shutil.rmtree(CLONE_DIR, ignore_errors=True)\n","\n","# 设置 Git 信息\n","subprocess.run([\"git\", \"config\", \"--global\", \"user.name\", GIT_USERNAME])\n","subprocess.run([\"git\", \"config\", \"--global\", \"user.email\", GIT_EMAIL])\n","\n","# 输入 GitHub Token\n","token = getpass(\"GitHub Token: \")\n","\n","# 克隆仓库\n","repo_url = f\"https://{GIT_USERNAME}:{token}@github.com/{GIT_USERNAME}/{REPO_NAME}.git\"\n","clone_result = subprocess.run([\"git\", \"clone\", repo_url], cwd=\"/content\")\n","\n","if clone_result.returncode != 0:\n","    raise RuntimeError(\"❌ 仓库克隆失败，请检查 Token 或权限\")\n","\n","# ========== 复制内容 ==========\n","# 检查源目录\n","if not os.path.exists(SOURCE_DIR):\n","    raise FileNotFoundError(f\"❌ 找不到要上传的目录: {SOURCE_DIR}\")\n","\n","# 删除 clone 的仓库中的所有文件\n","print(\"🧹 清空旧仓库内容...\")\n","for filename in os.listdir(CLONE_DIR):\n","    file_path = os.path.join(CLONE_DIR, filename)\n","    if filename == \".git\":\n","        continue  # 不删除 .git 目录\n","    if os.path.isfile(file_path) or os.path.islink(file_path):\n","        os.unlink(file_path)\n","    elif os.path.isdir(file_path):\n","        shutil.rmtree(file_path)\n","\n","# 拷贝内容\n","print(\"📂 正在复制目录...\")\n","for item in os.listdir(SOURCE_DIR):\n","    s = os.path.join(SOURCE_DIR, item)\n","    d = os.path.join(CLONE_DIR, item)\n","    if os.path.isdir(s):\n","        shutil.copytree(s, d)\n","    else:\n","        shutil.copy2(s, d)\n","\n","# ========== Git 操作 ==========\n","os.chdir(CLONE_DIR)\n","\n","# 确保当前是 git 仓库\n","if not os.path.exists(os.path.join(CLONE_DIR, \".git\")):\n","    raise RuntimeError(\"❌ 当前目录不是 Git 仓库，请检查 .git 是否存在\")\n","\n","# 添加改动\n","subprocess.run([\"git\", \"add\", \".\"], check=True)\n","\n","# 检查是否有改动\n","status = subprocess.run([\"git\", \"status\", \"--porcelain\"], stdout=subprocess.PIPE)\n","if not status.stdout.strip():\n","    print(\"⚠️ 没有文件改动，跳过提交和推送\")\n","else:\n","    # 提交更改\n","    subprocess.run([\"git\", \"commit\", \"-m\", \"📤 Upload directory from Colab\"], check=True)\n","\n","    # 推送\n","    push_result = subprocess.run([\"git\", \"push\", \"origin\", \"main\"])\n","\n","    if push_result.returncode != 0:\n","        raise RuntimeError(\"❌ 推送失败，请检查 Token 或网络\")\n","    else:\n","        print(\"✅ 推送成功！请在 GitHub 查看\")\n","\n","# 显示当前路径确认\n","print(\"✅ 当前仓库路径:\", os.getcwd())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TtKuBDFUZZMn","outputId":"eba87846-c245-4ac8-8564-d7d050765408"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["GitHub Token: ··········\n","🧹 清空旧仓库内容...\n","📂 正在复制目录...\n"]}]},{"cell_type":"code","source":["!cd /content/course_li && git push origin main"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vpMrUnc9kXH_","executionInfo":{"status":"ok","timestamp":1754470124300,"user_tz":-480,"elapsed":4425,"user":{"displayName":"Yunjia Liu","userId":"00294659283690096722"}},"outputId":"ce204686-1b36-4d79-cf4f-907bc8c3a202"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Enumerating objects: 10, done.\n","Counting objects:  10% (1/10)\rCounting objects:  20% (2/10)\rCounting objects:  30% (3/10)\rCounting objects:  40% (4/10)\rCounting objects:  50% (5/10)\rCounting objects:  60% (6/10)\rCounting objects:  70% (7/10)\rCounting objects:  80% (8/10)\rCounting objects:  90% (9/10)\rCounting objects: 100% (10/10)\rCounting objects: 100% (10/10), done.\n","Delta compression using up to 2 threads\n","Compressing objects: 100% (8/8), done.\n","Writing objects: 100% (8/8), 2.65 MiB | 2.12 MiB/s, done.\n","Total 8 (delta 0), reused 0 (delta 0), pack-reused 0\n","remote: \u001b[1;31merror\u001b[m: GH013: Repository rule violations found for refs/heads/main.\u001b[K\n","remote: \n","remote: - GITHUB PUSH PROTECTION\u001b[K\n","remote:   —————————————————————————————————————————\u001b[K\n","remote:     Resolve the following violations before pushing again\u001b[K\n","remote: \n","remote:     - Push cannot contain secrets\u001b[K\n","remote: \n","remote:     \u001b[K\n","remote:      (?) Learn how to resolve a blocked push\u001b[K\n","remote:      https://docs.github.com/code-security/secret-scanning/working-with-secret-scanning-and-push-protection/working-with-push-protection-from-the-command-line#resolving-a-blocked-push\u001b[K\n","remote:     \u001b[K\n","remote:     \u001b[K\n","remote:       —— Hugging Face User Access Token ————————————————————\u001b[K\n","remote:        locations:\u001b[K\n","remote:          - commit: c039735e55522e741974e1273407f433df9217be\u001b[K\n","remote:            path: MLHW3_understanding_LLM_transformers:1\u001b[K\n","remote:     \u001b[K\n","remote:        (?) To push, remove secret from commit(s) or follow this URL to allow the secret.\u001b[K\n","remote:        https://github.com/cnlyj6/course_li/security/secret-scanning/unblock-secret/30uGTFF7NBgjw8ZtMvFh7lmQxIU\u001b[K\n","remote:     \u001b[K\n","remote: \n","remote: \n","To https://github.com/cnlyj6/course_li.git\n"," \u001b[31m! [remote rejected]\u001b[m main -> main (push declined due to repository rule violations)\n","\u001b[31merror: failed to push some refs to 'https://github.com/cnlyj6/course_li.git'\n","\u001b[m"]}]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[{"file_id":"1Ku_p27ml8QJ-Rd7FilZQvDA9axe68V7o","timestamp":1754271097829},{"file_id":"1uuIsJv1AlAMd6KOxZQsm6kOUf08w2PYE","timestamp":1740042385351},{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/hw3-understand-transformers-1a99639d-6f59-4bf8-8a2e-02901f5be25a.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20250204/auto/storage/goog4_request&X-Goog-Date=20250204T070234Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=3251cc1a6d8adb689a6aa72f0d2c76ba36dbff4f07556f3574bd165042e6b71f33bb2bc76f6edb70cb905e54c8b04730be5cec7f0a4de4bae9c126478be8bc9a6ed1894696d562c5cd7b894f25b1e38fdf7575acead809765de147e71c6856359ec073de9498aa2268306eb9081b2fee9a6d861ba7694da6e485bb0f7bf18ac0443a93021da580ecb06ffbdc5dd8a89c30cd7fa52cc03033881b8822bcf03db8150e1dfcf345a86460ab6c922abfe881a8f9a256c0c51a2066b8c7489049b9356876067bafdee700d8c72ca7b20a3de6c8fa1a7b59085cdde36248e32e10e604cf5f8b5221025adc55ec11d4daf7b2f805a3f40943f4151633941ac8754b2de4","timestamp":1738653415299}]},"kaggle":{"accelerator":"gpu","dataSources":[],"dockerImageVersionId":30840,"isGpuEnabled":true,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"},"widgets":{"application/vnd.jupyter.widget-state+json":{"9be077b1bed949eda281919cfe43cf38":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_86fb2eafe1744d07a97752061efbc6a8","IPY_MODEL_7b7cebc5bf544e1095a90650f64b02ce","IPY_MODEL_55360925831945af80d84fb2b4123b8a"],"layout":"IPY_MODEL_095fb84dcd524c13aa2d8504e9646866"}},"86fb2eafe1744d07a97752061efbc6a8":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b62d87e4f1c14b169b55a941a52b4e23","placeholder":"​","style":"IPY_MODEL_7a676d6a9c674d7ba8c5f048c8df29c9","value":"Loading checkpoint shards: 100%"}},"7b7cebc5bf544e1095a90650f64b02ce":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_3f6a42d034ff45c1a081ec894d464261","max":2,"min":0,"orientation":"horizontal","style":"IPY_MODEL_88e6212b903347a0b07a94c933888c2f","value":2}},"55360925831945af80d84fb2b4123b8a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_680da7d238264edf891410c022134206","placeholder":"​","style":"IPY_MODEL_48dfe9f7d910489b8f956c98354fdabe","value":" 2/2 [00:28&lt;00:00, 11.89s/it]"}},"095fb84dcd524c13aa2d8504e9646866":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b62d87e4f1c14b169b55a941a52b4e23":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"7a676d6a9c674d7ba8c5f048c8df29c9":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"3f6a42d034ff45c1a081ec894d464261":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"88e6212b903347a0b07a94c933888c2f":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"680da7d238264edf891410c022134206":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"48dfe9f7d910489b8f956c98354fdabe":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"nbformat":4,"nbformat_minor":0}